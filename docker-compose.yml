services:

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:8-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq


  mongo:
    image: mongo:6
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  elasticsearch:
    image: elasticsearch:8.13.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.13.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"

  flower:
    image: mher/flower
    container_name: flower
    environment:
      - FLOWER_BROKER=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672//
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: backend/Dockerfile
    volumes:
      - ./backend:/app
    env_file:
      - .env
    expose:
      - "8000"
    depends_on:
      - postgres
      - redis
      - rabbitmq

  fastapi:
    container_name: fastapi
    build:
      context: .
      dockerfile: fastapi/Dockerfile
    volumes:
      - ./fastapi:/app
    env_file:
      - .env
    expose:
      - "8002"
    depends_on:
      - mongo
      - redis

  celery:
    container_name: celery
    build:
      context: .
      dockerfile: backend/Dockerfile
    entrypoint: /app/celery_entrypoint.sh
    env_file:
      - .env
    depends_on:
      - backend
      - redis
      - rabbitmq

  locust:
    container_name: locust
    build:
      context: .
      dockerfile: locust/Dockerfile
    ports:
      - "8089:8089"
    depends_on:
      - backend
      - fastapi

  nginx:
    image: nginx:stable
    container_name: nginx
    restart: always
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend

volumes:
  pg_data:
  redis_data:
  mongo_data:
  es_data:
  rabbitmq_data: